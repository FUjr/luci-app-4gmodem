#!/bin/sh
source /usr/share/libubox/jshn.sh 
lte_bw() {
	BW=$(echo $1 | grep -o "[0-5]\{1\}")
	case $BW in
		"0")
			BW="1.4" ;;
		"1")
			BW="3" ;;
		"2"|"3"|"4"|"5")
			BW=$((($(echo $BW) - 1) * 5)) ;;
	esac
    echo "$BW MHz"
}


#查询信息强度
#理想状态下可以获取信号强度、信号质量、信号百分比
All_CSQ()
{   
    
    Debug "All_CSQ"
	#信号
	CSQ=$(gl_modem $ATPORT "AT+CSQ")
    CSQ=$(echo $CSQ | grep -i -o "+CSQ: [0-9]\{1,2\}" | grep -o "[0-9]\{1,2\}")
	if [ "$CSQ" = "99" ]; then
		json_init
        json_add_int CSQ 0
        json_add_string CSQ_PER "0%"
        json_add_string CSQ_RSSI "0 dBm"
        json_close_object
        CSQ_INFO=`json_dump`
	else
		CSQ_PER=$(($CSQ * 100/31))"%"
		CSQ_RSSI=$((2 * CSQ - 113))" dBm"
        json_init
        json_add_int CSQ "$CSQ"
        json_add_string CSQ_PER "$CSQ_PER"
        json_add_string CSQ_RSSI "$CSQ_RSSI"
        json_close_object
        CSQ_INFO=`json_dump`
	fi
}

#获取sim信息，理想状态下可以获取是否插入、imsi、iccid
Vendor_SIMINFO()
{
    Debug "Vendor_SIMINFO"
    ATI=$(gl_modem ${ATPORT} "ATI")
    READY=$(gl_modem $ATPORT "AT+CPIN?" | grep -o "+CPIN: READY" |wc -l)
    IMEI=$(cat /tmp/ati_${cfg}  | grep 'IMEI:' |cut -d: -f2  |tr  -d '\r' |tr -d ' ')
    json_init
    json_add_string IMEI "$IMEI"
    if [ "$READY" = "1" ]; then
        # 获取IMSI
        IMSI=$( gl_modem $ATPORT "AT+CIMI"  | sed -n '3p' | cut -d: -f2 )
	    # 获取ICCID
	    ICCID=$( gl_modem $ATPORT "AT+ICCID" | sed -n '3p' | awk -F ': ' '{print$2}' )
        # 获取电话号码
		phone=$( gl_modem $ATPORT "AT+CNUM"  | grep "+CNUM:" |grep -o "[0-9]\{9,\}"  )
		json_add_string IMSI "$IMSI"
		json_add_string ICCID "$ICCID"
		json_add_string IMSI "$IMSI"
		json_add_string phone "$phone"
        json_add_string SIM_READY "Yes"
    else
        json_add_string SIM_READY "No"
    fi
    json_close_object
    SIM_INFO=`json_dump`

}

Vendor_ModuleInfo(){
    gl_modem $ATPORT "ATI" > /tmp/ati_${cfg}

    Model=$( cat /tmp/ati_${cfg} | grep 'Model:' |cut -d: -f2 )
    Manufacturer=$( cat /tmp/ati_${cfg}  | grep 'Manufacturer:' |cut -d: -f2 )
    Temperature=$(gl_modem $ATPORT " "AT+MTSM=1"" | grep '+MTSM:' |cut -d: -f2)
    IMEI=$(cat /tmp/ati_${cfg}  | grep 'IMEI:' |cut -d: -f2  |tr  -d '\r' |tr -d ' ')
	json_init
    json_add_string Model "$Model"
    json_add_string Manufacturer "$Manufacturer"
    json_add_string IMEI "$IMEI"
    json_close_object
    
    MODULE_INFO=`json_dump`
}


Vendor_Cellinfo()
{
COPS0=$( gl_modem $ATPORT "AT+COPS=3,0;+COPS?" |grep '+COPS:')
#返回示例 +COPS: 0,0,"CHN-UNICOM",7
Carrier=$(echo $COPS0  | cut -d, -f3 | grep -o "[^\"]\+")
RAT_num=$(echo $COPS0  | cut -d, -f4 | grep -o "[0-9]\{1\}")

#获取当前无线接入技术
# 0：GSM 
# 1：GSM compact 
# 2：UTRAN 
# 3：GSM w/EGPRS 
# 4：UTRAN w/HSDPA 
# 5：UTRAN w/HSUPA 
# 6：UTRAN w/HSDPA and HSUPA 
# 7：E-UTRAN 
# 9：CDMA
#返回示例 +COPS: 0,0,"CHN-UNICOM",7

case $RAT_num in
    "0")
        RAT="GSM"
        ;;
    "1")
        RAT="GSM compact"
        ;;
    "2")
        RAT="UTRAN"
        ;;
    "3")
        RAT="GSM w/EGPRS"
        ;;
    "4")
        RAT="UTRAN w/HSDPA"
        ;;
    "5")
        RAT="UTRAN w/HSUPA"
        ;;
    "6")
        RAT="UTRAN w/HSDPA and HSUPA"
        ;;
    "7")
        RAT="LTE"
        ;;
    "9")
        RAT="CDMA"
        ;;
    *)
        RAT="Unknown"
        ;;
esac
#AT+BMTCELLINFO
# Response 
# The instruction is used to extract the relevant information of the current 
# service cell and the neighbor cell, and the extraction structure is displayed 
# on the TE. 
# LTE mode  
# return： 
# CELL_ID: 
# LAC_ID: 
# RSSI
# RSRP 
# RSRQ 
# SINR 
# ACTIVE_BAND 
# ACTIVE_CHANNEL  // 
# EARFCN_DL  // Downlink the Evolved-UTRA ARFCN (EARFCN) of the 
# serving system 
# EARFCN_UL  // Uplink the EARFCN of serving system. Applicable for 
# LTE systems 
# Other mode： 
# CELL_ID: 
# LAC_ID: 
# ACTIVE_BAND: 
# ACTIVE_CHANNEL: 
#AT+BMTCELLINFO
# AT+BMTCELLINFO 有两种返回 一种是下面这样多行的，每行一种信息，另一个是单行的，通过逗号分隔
# +BMTCELLINFO: 
# CELL_ID:123860788 
# PCI:151 
# LAC_ID:30100 
# RSSI:60 
# RSRP:-93 
# RSRQ:-13 
# SINR:3 
# ACTIVE BAND:3 
# ACTIVE CHANNEL:0 
# EARFCN_DL:0 
# EARFCN_UL:0 
# EARFCN:1850 
# ENODEBID:483831 
# TAC:30100 
# RRC_STATUS:4 
# OK
#
# AT+BMTCELLINFO
# +BMTCELLINFO: CELL_ID:127461681,LAC_ID:42347,RSSI:71, RSRP:-101, RSRQ:-10, SINR:15.4,active band:3,active channel:0,EARFCN_DL:0,EARFCN_UL:0

json_init
json_add_string RAT "$RAT"
json_add_string Carrier "$Carrier"
for i in $(gl_modem $ATPORT "AT+BMTCELLINFO" | tr ',' "\n" );do
    #如果含有逗号，说明是单行
    key=$(echo $i |cut -d: -f1)
    value=$(echo $i |cut -d: -f2)
    #如果key位band或者BAND，需要转换为LBAND
    if [ "$key" == 'BAND' ] || [ "$key" == 'band' ] ;then 
        key='LBAND'
    fi
    if [ $key != $value ] && [ -n $value ] && [ $key != '+BMTCELLINFO' ];then
        json_add_string $key $value
    fi
done
json_close_object
CELL_INFO=`json_dump`

}



Vendor_Get_Lock_Band()
{
    modem_info=$(gl_modem $ATPORT 'AT+BMBANDPREF?')
    current_rat=$(gl_modem $ATPORT 'AT+BMMODODREX?' | grep -o "[0-9]\{1,2\}")
    LTE_LOCK=$(echo "$modem_info" | grep '+BMBANDPREF:' | awk -F, '{print $2}' | sed 's/"//g' | tr '[:a-z:]' '[:A-Z:]')
    LTE_LOCK_SUPPORTBAND=$(gl_modem $ATPORT 'AT+BMBANDPREF=?' | awk -F, '{print $2}' | sed 's/"//g' | tr '[:a-z:]' '[:A-Z:]')
    LTE_LOCK_SUPPORTBAND=$(convert2band $LTE_LOCK_SUPPORTBAND)
    if [ -z "$LOCK_BAND" ]; then
        LOCK_BAND="Unknown"
    fi
    LOCK_BAND=$(convert2band $LTE_LOCK)
    json_init
    json_add_string current_rat "$current_rat"
    json_add_object AllowedBand
    for band in $LTE_LOCK_SUPPORTBAND; do
        json_add_string $band $band
    done
    json_close_object
    json_add_object "RAT_Mode"
    json_add_string "Auto" "2"
    json_add_string "GSM only" "21"
    json_add_string "WCDMA only" "2"
    json_add_string "LTE only" "5"
    json_add_string "TD-SCDMA only" "6"
    json_add_string "UMTS only" "10"
    json_add_string "CDMA only" "15"
    json_close_object
    json_add_array "band_list"
    for band in $(echo $LOCK_BAND | tr ',' '\n' | sort -n | uniq); do
        json_add_string "" $band
    done
    json_close_array
    json_close_object
    LOCK_BAND=`json_dump`
}


Vendor_reboot_module(){
    gl_modem $ATPORT "AT+CFUN=1,1" 2>&1 > /dev/null
}

Vendor_clear_cache(){
    rm -rf /tmp/cpe_*
    rm -rf /tmp/vendor
}

vendor_redial(){
    #重新检查驱动并拨号
    /etc/init.d/modem_load_drv stop
    /etc/init.d/modem_load_drv start
    Vendor_clear_cache
    /etc/init.d/modem_dial stop
    /etc/init.d/modem_dial start
}

Vendor_get_func(){
    json_init
    json_add_string "Vendor" "Fibocom"
    json_add_object "func"
    json_add_string "reset_module" "reset_module"
    json_add_string "reboot_module" "reboot_module"
    json_add_string "clear_cache" "clear_cache"
    json_add_string "redial" "redial"
    json_close_object
    json_close_object
    FUNC=`json_dump`
}



Vendor_run_func(){
    func=$arg1
    case $func in
        "reset_module")
            Vendor_reset_module
            ;;
        "reboot_module")
            Vendor_reboot_module
            ;;
        "clear_cache")
            Vendor_clear_cache
            ;;
        "redial")
            vendor_redial
            ;;
        *)
            echo "Unknown func $func"
            ;;
    esac
    echo "Done"
}

convert2band()
{
    hex_band=$1
    hex=$(echo $hex_band | grep -o "[0-9A-F]\{1,12\}")
    if [ -z "$hex" ]; then
        echo Invalid band
        retrun
    fi
    band_list=""
    bin=$(echo "ibase=16;obase=2;$hex" | bc)
    len=${#bin}
    for i in $(seq 1 ${#bin}); do
        if [ ${bin:$i-1:1} = "1" ]; then
            band_list=$band_list"\n"$((len - i + 1))
        fi
    done
    echo -e $band_list | sort -n | tr '\n' ' '
}

convert2hex()
{
    band_list=$1
    #splite band_list
    band_list=$(echo $band_list | tr ',' '\n' | sort -n | uniq)
    hex="0"
    for band in $band_list; do
        add_hex=$(echo "obase=16;2^($band - 1 )" | bc)
        hex=$(echo "obase=16;ibase=16;$hex + $add_hex" | bc)
    done
    if [ -n $hex ]; then
        echo $hex
    else
        echo Invalid band
        retrun
    fi
}

Vendor_Lock_RAT(){
    rat=$arg1
    gl_modem $ATPORT "AT+BMMODODRE=${rat}" 2>&1 > /dev/null
}

Vendor_reset_module(){
    gl_modem $ATPORT "AT+BMMODODREX=5" 2>&1 > /dev/null
    supportband=$(gl_modem /dev/ttyUSB2 at+bmbandpref=?|grep +BMBANDPREF: |awk -F: '{ print $NF }'|tr -d ' ' |sed  's/0x//g')
    band_mask1=$(echo $supportband | cut -d, -f1)
    band_mask2=$(echo $supportband | cut -d, -f2)
    band_mask3=$(echo $supportband | cut -d, -f3)
    gl_modem $ATPORT "AT+BMBANDPREF=${band_mask1},0,0" 2>&1 > /dev/null
    gl_modem $ATPORT "AT+BMBANDPREF=0,${band_mask2},0" 2>&1 > /dev/null
    gl_modem $ATPORT "AT+BMBANDPREF=0,0,${band_mask3}" 2>&1 > /dev/null
    gl_modem $ATPORT "AT&F" 2>&1 > /dev/null
    Vendor_clear_cache
}

Vendor_Lock_Band()
{   
    band=$arg1
    if [ -z $band ]; then
        echo "Invalid band"
        retrun
    fi
    hex=$(convert2hex $band)
    gl_modem $ATPORT 'AT+BMBANDPREF=0,'${hex}',0'   2>&1 > /dev/null
}
